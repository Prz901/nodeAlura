var EventEmitter = require("events-light");
var vdom = require("./vdom");
var VElement = vdom.aR_;
var VDocumentFragment = vdom.aS_;
var VComment = vdom.aT_;
var VText = vdom.aU_;
var VComponent = vdom.aV_;
var VFragment = vdom.aW_;
var virtualizeHTML = vdom.aX_;
var RenderResult = require("../RenderResult");
var defaultDocument = vdom.aY_;
var morphdom = require("./morphdom");
var attrsHelper = require("./helper-attrs");

var EVENT_UPDATE = "update";
var EVENT_FINISH = "finish";

function State(tree) {
    this.aZ_ = new EventEmitter();
    this.b__ = tree;
    this.ba_ = false;
}

function AsyncVDOMBuilder(globalData, parentNode, parentOut) {
    if (!parentNode) {
        parentNode = new VDocumentFragment();
    }

    var state;

    if (parentOut) {
        state = parentOut.J_;
    } else {
        state = new State(parentNode);
    }

    this.bb_ = 1;
    this.bc_ = 0;
    this.bd_ = null;
    this.be_ = parentOut;

    this.data = {};
    this.J_ = state;
    this.az_ = parentNode;
    this.global = globalData || {};
    this.bf_ = [parentNode];
    this.bg_ = false;
    this.bh_ = undefined;
    this.h_ = null;

    this.aw_ = null;
    this.an_ = null;
    this.ax_ = null;
}

var proto = AsyncVDOMBuilder.prototype = {
    aN_: true,
    X_: defaultDocument,

    bc: function (component, key, ownerComponent) {
        var vComponent = new VComponent(component, key, ownerComponent);
        return this.bi_(vComponent, 0, true);
    },

    p_: function (component, key, ownerComponent) {
        var vComponent = new VComponent(component, key, ownerComponent, true);
        this.bi_(vComponent, 0);
    },

    bi_: function (child, childCount, pushToStack) {
        this.az_.bj_(child);
        if (pushToStack === true) {
            this.bf_.push(child);
            this.az_ = child;
        }
        return childCount === 0 ? this : child;
    },

    element: function (tagName, attrs, key, component, childCount, flags, props) {
        var element = new VElement(tagName, attrs, key, component, childCount, flags, props);
        return this.bi_(element, childCount);
    },

    aK_: function (tagName, attrs, key, component, childCount, flags, props) {
        return this.element(tagName, attrsHelper(attrs), key, component, childCount, flags, props);
    },

    n: function (node, component) {
        // NOTE: We do a shallow clone since we assume the node is being reused
        //       and a node can only have one parent node.
        var clone = node.__();
        this.node(clone);
        clone.bk_ = component;

        return this;
    },

    node: function (node) {
        this.az_.bj_(node);
        return this;
    },

    text: function (text) {
        var type = typeof text;

        if (type != "string") {
            if (text == null) {
                return;
            } else if (type === "object") {
                if (text.toHTML) {
                    return this.h(text.toHTML());
                }
            }

            text = text.toString();
        }

        this.az_.bj_(new VText(text));
        return this;
    },

    comment: function (comment) {
        return this.node(new VComment(comment));
    },

    html: function (html) {
        if (html != null) {
            var vdomNode = virtualizeHTML(html, this.X_ || document);
            this.node(vdomNode);
        }

        return this;
    },

    beginElement: function (tagName, attrs, key, component, childCount, flags, props) {
        var element = new VElement(tagName, attrs, key, component, childCount, flags, props);
        this.bi_(element, childCount, true);
        return this;
    },

    aI_: function (tagName, attrs, key, component, childCount, flags, props) {
        return this.beginElement(tagName, attrsHelper(attrs), key, component, childCount, flags, props);
    },

    aL_: function (key, component, preserve) {
        var fragment = new VFragment(key, component, preserve);
        this.bi_(fragment, null, true);
        return this;
    },

    aM_: function () {
        this.endElement();
    },

    endElement: function () {
        var stack = this.bf_;
        stack.pop();
        this.az_ = stack[stack.length - 1];
    },

    end: function () {
        this.az_ = undefined;

        var remaining = --this.bb_;
        var parentOut = this.be_;

        if (remaining === 0) {
            if (parentOut) {
                parentOut.bl_();
            } else {
                this.bm_();
            }
        } else if (remaining - this.bc_ === 0) {
            this.bn_();
        }

        return this;
    },

    bl_: function () {
        var remaining = --this.bb_;

        if (remaining === 0) {
            var parentOut = this.be_;
            if (parentOut) {
                parentOut.bl_();
            } else {
                this.bm_();
            }
        } else if (remaining - this.bc_ === 0) {
            this.bn_();
        }
    },

    bm_: function () {
        var state = this.J_;
        state.ba_ = true;
        state.aZ_.emit(EVENT_FINISH, this.aO_());
    },

    bn_: function () {
        var lastArray = this._last;

        var i = 0;

        function next() {
            if (i === lastArray.length) {
                return;
            }
            var lastCallback = lastArray[i++];
            lastCallback(next);

            if (!lastCallback.length) {
                next();
            }
        }

        next();
    },

    error: function (e) {
        try {
            this.emit("error", e);
        } finally {
            // If there is no listener for the error event then it will
            // throw a new Error here. In order to ensure that the async fragment
            // is still properly ended we need to put the end() in a `finally`
            // block
            this.end();
        }

        return this;
    },

    beginAsync: function (options) {
        if (this.bg_) {
            throw Error("Tried to render async while in sync mode. Note: Client side await is not currently supported in re-renders (Issue: #942).");
        }

        var state = this.J_;

        if (options) {
            if (options.last) {
                this.bc_++;
            }
        }

        this.bb_++;

        var documentFragment = this.az_.bo_();
        var asyncOut = new AsyncVDOMBuilder(this.global, documentFragment, this);

        state.aZ_.emit("beginAsync", {
            out: asyncOut,
            parentOut: this
        });

        return asyncOut;
    },

    createOut: function () {
        return new AsyncVDOMBuilder(this.global);
    },

    flush: function () {
        var events = this.J_.aZ_;

        if (events.listenerCount(EVENT_UPDATE)) {
            events.emit(EVENT_UPDATE, new RenderResult(this));
        }
    },

    C_: function () {
        return this.J_.b__;
    },

    aO_: function () {
        return this.bp_ || (this.bp_ = new RenderResult(this));
    },

    on: function (event, callback) {
        var state = this.J_;

        if (event === EVENT_FINISH && state.ba_) {
            callback(this.aO_());
        } else if (event === "last") {
            this.onLast(callback);
        } else {
            state.aZ_.on(event, callback);
        }

        return this;
    },

    once: function (event, callback) {
        var state = this.J_;

        if (event === EVENT_FINISH && state.ba_) {
            callback(this.aO_());
        } else if (event === "last") {
            this.onLast(callback);
        } else {
            state.aZ_.once(event, callback);
        }

        return this;
    },

    emit: function (type, arg) {
        var events = this.J_.aZ_;
        switch (arguments.length) {
            case 1:
                events.emit(type);
                break;
            case 2:
                events.emit(type, arg);
                break;
            default:
                events.emit.apply(events, arguments);
                break;
        }
        return this;
    },

    removeListener: function () {
        var events = this.J_.aZ_;
        events.removeListener.apply(events, arguments);
        return this;
    },

    sync: function () {
        this.bg_ = true;
    },

    isSync: function () {
        return this.bg_;
    },

    onLast: function (callback) {
        var lastArray = this._last;

        if (lastArray === undefined) {
            this._last = [callback];
        } else {
            lastArray.push(callback);
        }

        return this;
    },

    B_: function (doc) {
        var node = this.bh_;
        if (!node) {
            var vdomTree = this.C_();
            // Create the root document fragment node
            doc = doc || this.X_ || document;
            this.bh_ = node = vdomTree.bq_(doc, null);
            morphdom(node, vdomTree, doc, this.h_);
        }
        return node;
    },

    toString: function (doc) {
        var docFragment = this.B_(doc);
        var html = "";

        var child = docFragment.firstChild;
        while (child) {
            var nextSibling = child.nextSibling;
            if (child.nodeType != 1) {
                var container = docFragment.ownerDocument.createElement("div");
                container.appendChild(child.cloneNode());
                html += container.innerHTML;
            } else {
                html += child.outerHTML;
            }

            child = nextSibling;
        }

        return html;
    },

    then: function (fn, fnErr) {
        var out = this;
        var promise = new Promise(function (resolve, reject) {
            out.on("error", reject).on(EVENT_FINISH, function (result) {
                resolve(result);
            });
        });

        return Promise.resolve(promise).then(fn, fnErr);
    },

    catch: function (fnErr) {
        return this.then(undefined, fnErr);
    },

    isVDOM: true,

    c: function (componentDef, key, customEvents) {
        this.aw_ = componentDef;
        this.an_ = key;
        this.ax_ = customEvents;
    }
};

proto.e = proto.element;
proto.be = proto.beginElement;
proto.ee = proto.aJ_ = proto.endElement;
proto.t = proto.text;
proto.h = proto.w = proto.write = proto.html;

module.exports = AsyncVDOMBuilder;